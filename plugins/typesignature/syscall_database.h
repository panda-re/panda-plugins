// WARNING: Autogenerated code
#ifndef WIN7_Win7x64_SP1_SYSCALL_DATA_H
#define WIN7_Win7x64_SP1_SYSCALL_DATA_H

#include <map>
#include <string>
#include <vector>

#include "arguments.h"

typedef target_ulong SyscallID;

namespace SyscallDatabase
{

bool load_syscall_data(const char* profile, const char* database);

// Return true if the syscall name was found
bool lookup_syscall_id_by_name(const char* syscall_name, SyscallID& sid);

// Return true if the syscall name was found
bool lookup_syscall_name_by_id(char const** syscall_name, SyscallID sid);

// For the call tracer
bool lookup_syscall_id_by_name_with_update(const char* syscall_name, SyscallID& sid);

// Lookup syscall argument specifications
int lookup_syscall_argument_count(SyscallID sid);

// Return a vector of argument specifications or nullptr
const ArgSpec* lookup_syscall_argument_specification(SyscallID sid, int pos);

// Register types with the type system
void register_types(void (*)(const char*));

// Register system call prototypes with type system
void register_syscalls(void (*register_syscall_id)(int64_t, const char*, int));

// Register system call arguments with type system
void register_syscall_arguments(
    void (*register_syscall_arguments_cb)(int64_t, const ArgSpec* const*, int));

// Return true if the call id was found
bool lookup_call_id_by_export_info(uint64_t rva, uint64_t timestamp, uint64_t imagesize,
                                   int& cid);

} // namespace SyscallDatabase
#endif
